"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importSearchRaw = void 0;
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
const dynamic_import_js_1 = require("../../helper/dynamic-import.js");
const d = (0, debug_1.default)('electron-forge:import-search');
async function importSearchRaw(relativeTo, paths) {
    // Attempt to locally short-circuit if we're running from a checkout of forge
    if (__dirname.includes('forge/packages/api/core/') && paths.length === 1 && paths[0].startsWith('@electron-forge/')) {
        const [moduleType, moduleName] = paths[0].split('/')[1].split('-');
        try {
            const localPath = path_1.default.resolve(__dirname, '..', '..', '..', '..', moduleType, moduleName);
            d('testing local forge build', { moduleType, moduleName, localPath });
            return await (0, dynamic_import_js_1.dynamicImportMaybe)(localPath);
        }
        catch {
            // Ignore
        }
    }
    // Load via normal search paths
    const testPaths = paths
        .concat(paths.map((mapPath) => path_1.default.resolve(relativeTo, mapPath)))
        .concat(paths.map((mapPath) => path_1.default.resolve(relativeTo, 'node_modules', mapPath)));
    d('searching', testPaths, 'relative to', relativeTo);
    for (const testPath of testPaths) {
        try {
            d('testing', testPath);
            return await (0, dynamic_import_js_1.dynamicImportMaybe)(testPath);
        }
        catch (err) {
            if (err instanceof Error) {
                const requireErr = err;
                // Ignore require-related errors
                if (requireErr.code !== 'MODULE_NOT_FOUND' || ![undefined, testPath].includes(requireErr.requestPath)) {
                    throw err;
                }
            }
        }
    }
    d('failed to find a module in', testPaths);
    return null;
}
exports.importSearchRaw = importSearchRaw;
exports.default = async (relativeTo, paths) => {
    const result = await importSearchRaw(relativeTo, paths);
    return typeof result === 'object' && result && result.default ? result.default : result;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LXNlYXJjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2ltcG9ydC1zZWFyY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLGtEQUEwQjtBQUUxQixzRUFBb0U7QUFFcEUsTUFBTSxDQUFDLEdBQUcsSUFBQSxlQUFLLEVBQUMsOEJBQThCLENBQUMsQ0FBQztBQVN6QyxLQUFLLFVBQVUsZUFBZSxDQUFJLFVBQWtCLEVBQUUsS0FBZTtJQUMxRSw2RUFBNkU7SUFDN0UsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1FBQ25ILE1BQU0sQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkUsSUFBSTtZQUNGLE1BQU0sU0FBUyxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDMUYsQ0FBQyxDQUFDLDJCQUEyQixFQUFFLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ3RFLE9BQU8sTUFBTSxJQUFBLHNDQUFrQixFQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzVDO1FBQUMsTUFBTTtZQUNOLFNBQVM7U0FDVjtLQUNGO0lBRUQsK0JBQStCO0lBQy9CLE1BQU0sU0FBUyxHQUFHLEtBQUs7U0FDcEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDakUsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQyxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3JELEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1FBQ2hDLElBQUk7WUFDRixDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sTUFBTSxJQUFBLHNDQUFrQixFQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNDO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUU7Z0JBQ3hCLE1BQU0sVUFBVSxHQUFHLEdBQW1CLENBQUM7Z0JBQ3ZDLGdDQUFnQztnQkFDaEMsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLGtCQUFrQixJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsRUFBRTtvQkFDckcsTUFBTSxHQUFHLENBQUM7aUJBQ1g7YUFDRjtTQUNGO0tBQ0Y7SUFDRCxDQUFDLENBQUMsNEJBQTRCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDM0MsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBbENELDBDQWtDQztBQU1ELGtCQUFlLEtBQUssRUFBSyxVQUFrQixFQUFFLEtBQWUsRUFBcUIsRUFBRTtJQUNqRixNQUFNLE1BQU0sR0FBRyxNQUFNLGVBQWUsQ0FBb0IsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNFLE9BQU8sT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxNQUFtQixDQUFDO0FBQ3hHLENBQUMsQ0FBQyJ9